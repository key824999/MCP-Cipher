{
  "tool_name" : "MCP-Cipher",
  "version" : "0.0.1",
  "description" : "A Java-based MCP-compatible tool that provides encryption, decryption, hashing, HMAC, and key generation functionalities using AES, RSA, SHA-256, and more.",
  "entrypoint" : {
    "command" : "java",
    "args" : [ "-jar", "./libs/MCP-Cipher-0.0.1-SNAPSHOT.jar" ]
  },
  "actions" : [ {
    "name" : "encryptAES",
    "description" : "Encrypts plaintext using AES in ECB mode (Base64 encoded).",
    "parameters" : {
      "plainText" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "toHex",
    "description" : "Encodes byte array to hex string.",
    "parameters" : {
      "bytes" : "any"
    }
  }, {
    "name" : "decryptAES",
    "description" : "Decrypts AES-encrypted Base64 text using ECB mode.",
    "parameters" : {
      "encryptedText" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "fromHex",
    "description" : "Decodes hex string to Base64 string.",
    "parameters" : {
      "hex" : "string"
    }
  }, {
    "name" : "validateAESKey",
    "description" : "Validates the AES key. Must be non-empty and at least 8 characters.",
    "parameters" : {
      "key" : "string"
    }
  }, {
    "name" : "encryptAESWithIV",
    "description" : "Encrypts plaintext using AES in CBC mode with random IV. Returns IV:cipherText in Base64.",
    "parameters" : {
      "plainText" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "generateAESKey",
    "description" : "Generates a random AES key of the given bit size (128, 192, or 256).",
    "parameters" : {
      "bitSize" : "number"
    }
  }, {
    "name" : "decryptJSON",
    "description" : "Decrypts a previously encrypted JSON string (AES CBC IV:cipherText format).",
    "parameters" : {
      "encryptedJson" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "decryptAESWithIV",
    "description" : "Decrypts AES CBC-encrypted Base64 text formatted as IV:cipherText.",
    "parameters" : {
      "encryptedWithIV" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "encryptJSON",
    "description" : "Encrypts a JSON string using AES CBC with IV. Returns Base64 IV:cipherText.",
    "parameters" : {
      "json" : "string",
      "secretKey" : "string"
    }
  }, {
    "name" : "generateSHA256",
    "description" : "Generates a SHA-256 hash of the input string (hex encoded).",
    "parameters" : {
      "input" : "string"
    }
  }, {
    "name" : "generateMD5",
    "description" : "Generates an MD5 hash of the input string (hex encoded, insecure).",
    "parameters" : {
      "input" : "string"
    }
  }, {
    "name" : "generateSaltedHash",
    "description" : "Generates a hash of the input combined with a salt using the specified algorithm.",
    "parameters" : {
      "input" : "string",
      "salt" : "string",
      "algorithm" : "string"
    }
  }, {
    "name" : "generateRandomSalt",
    "description" : "Generates a random alphanumeric salt of the specified length.",
    "parameters" : {
      "length" : "number"
    }
  }, {
    "name" : "generateSHA512",
    "description" : "Generates a SHA-512 hash of the input string (hex encoded).",
    "parameters" : {
      "input" : "string"
    }
  }, {
    "name" : "compareHash",
    "description" : "Compares input string with expected hash using a given algorithm (SHA-256, SHA-512, or MD5).",
    "parameters" : {
      "input" : "string",
      "expectedHash" : "string",
      "algorithm" : "string"
    }
  }, {
    "name" : "isHash",
    "description" : "Checks if the input string is a valid hexadecimal hash (e.g., SHA or MD5).",
    "parameters" : {
      "input" : "string"
    }
  }, {
    "name" : "hashBase64",
    "description" : "Generates a hash of the input and encodes the result as Base64.",
    "parameters" : {
      "input" : "string",
      "algorithm" : "string"
    }
  }, {
    "name" : "isHashMatchWithSalt",
    "description" : "Checks whether the salted hash of input matches the expected hash using the specified algorithm.",
    "parameters" : {
      "input" : "string",
      "salt" : "string",
      "expectedHash" : "string",
      "algorithm" : "string"
    }
  }, {
    "name" : "generateRSAKeyPair",
    "description" : "Generates an RSA public/private key pair and returns them as Base64 strings.",
    "parameters" : { }
  }, {
    "name" : "signData",
    "description" : "Signs data using a private RSA key and returns the Base64 signature.",
    "parameters" : {
      "data" : "string",
      "base64PrivateKey" : "string"
    }
  }, {
    "name" : "decryptRSA",
    "description" : "Decrypts RSA-encrypted Base64 text using a Base64-encoded private key.",
    "parameters" : {
      "cipherText" : "string",
      "base64PrivateKey" : "string"
    }
  }, {
    "name" : "signJSON",
    "description" : "Signs a JSON string using RSA and returns the Base64 signature.",
    "parameters" : {
      "json" : "string",
      "base64PrivateKey" : "string"
    }
  }, {
    "name" : "encryptRSA",
    "description" : "Encrypts a string using a Base64-encoded RSA public key.",
    "parameters" : {
      "plainText" : "string",
      "base64PublicKey" : "string"
    }
  }, {
    "name" : "validateRSAKey",
    "description" : "Checks if the given Base64-encoded RSA key string is structurally valid.",
    "parameters" : {
      "base64Key" : "string"
    }
  }, {
    "name" : "decryptPEMKey",
    "description" : "Converts a PEM-formatted RSA key into a Base64-encoded string.",
    "parameters" : {
      "pem" : "string",
      "isPublic" : "number"
    }
  }, {
    "name" : "formatKeyToPEM",
    "description" : "Formats a Base64-encoded RSA key string into PEM format.",
    "parameters" : {
      "base64Key" : "string",
      "isPublic" : "number"
    }
  }, {
    "name" : "verifySignature",
    "description" : "Verifies the RSA signature using the original data and a public key.",
    "parameters" : {
      "data" : "string",
      "base64Signature" : "string",
      "base64PublicKey" : "string"
    }
  }, {
    "name" : "decryptLongRSA",
    "description" : "Decrypts long RSA-encrypted text (Base64) using private key and automatic block merging.",
    "parameters" : {
      "cipherText" : "string",
      "base64PrivateKey" : "string"
    }
  }, {
    "name" : "encryptLongRSA",
    "description" : "Encrypts long plaintext using RSA public key with automatic block splitting.",
    "parameters" : {
      "plainText" : "string",
      "base64PublicKey" : "string"
    }
  } ]
}